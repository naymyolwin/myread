{"version":3,"sources":["BooksAPI.js","book.js","searchpage.js","booklist.js","App.js","reportWebVitals.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","books","update","book","shelf","id","method","body","JSON","stringify","search","query","props","image","className","style","imageLinks","width","height","backgroundImage","thumbnail","defaultValue","onChange","e","changeshelf","value","disabled","title","authors","searchpage","to","onClick","handleClose","autoFocus","searchInputHandler","type","placeholder","searchBooksList","map","booklist","bookslist","BooksApp","state","booksList","reloadBooks","BooksAPI","setState","event","target","emptyBookList","length","console","log","t1","find","t2","this","basename","process","exact","path","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c08d086.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from \"react\";\n\nfunction book(props) {\n  const image = \"imageLinks\" in props.book;\n  return (\n    <div className=\"book\">\n      <div className=\"book-top\">\n        <div\n          className=\"book-cover\"\n          style={\n            props.book.imageLinks !== null\n              ? {\n                  width: 128,\n                  height: 193,\n                  backgroundImage: image\n                    ? `url(${props.book.imageLinks.thumbnail})`\n                    : null,\n                }\n              : {\n                  width: 128,\n                  height: 193,\n                }\n          }\n        ></div>\n        <div className=\"book-shelf-changer\">\n          <select\n            defaultValue={props.shelf}\n            onChange={(e) => {\n              return props.changeshelf(props.book, e);\n            }}\n          >\n            <option value=\"move\" disabled>\n              Move to...\n            </option>\n            <option value=\"currentlyReading\">Currently Reading</option>\n            <option value=\"wantToRead\">Want to Read</option>\n            <option value=\"read\">Read</option>\n            <option value=\"none\">None</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"book-title\">{props.book.title}</div>\n      <div className=\"book-authors\">{props.book.authors}</div>\n    </div>\n  );\n}\n\nexport default book;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Book from \"./book\";\n\nfunction searchpage(props) {\n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link to=\"/\" className=\"close-search\" onClick={props.handleClose}>\n          Close\n        </Link>\n        <div className=\"search-books-input-wrapper\">\n          <input\n            autoFocus\n            onChange={props.searchInputHandler}\n            value={props.query}\n            type=\"text\"\n            placeholder=\"Search by title or author\"\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\">\n          {props.searchBooksList.map((book) => (\n            <li key={book.id}>\n              <Book\n                book={book}\n                shelf={book.shelf ? book.shelf : \"none\"}\n                changeshelf={props.changeshelf}\n              />\n            </li>\n          ))}\n        </ol>\n      </div>\n    </div>\n  );\n}\n\nexport default searchpage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Book from \"./book\";\n\nfunction booklist(props) {\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-title\">\n        <h1>MyReads</h1>\n      </div>\n      <div className=\"list-books-content\">\n        <div>\n          <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Currently Reading</h2>\n            <div className=\"bookshelf-books\">\n              <ol className=\"books-grid\">\n                {props.bookslist.map((book) =>\n                  book.shelf === \"currentlyReading\" ? (\n                    <li key={book.id}>\n                      <Book\n                        book={book}\n                        shelf={book.shelf}\n                        changeshelf={props.changeshelf}\n                      />\n                    </li>\n                  ) : null\n                )}\n              </ol>\n            </div>\n          </div>\n          <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Want to Read</h2>\n            <div className=\"bookshelf-books\">\n              <ol className=\"books-grid\">\n                {props.bookslist.map((book) =>\n                  book.shelf === \"wantToRead\" ? (\n                    <li key={book.id}>\n                      <Book\n                        book={book}\n                        shelf={book.shelf}\n                        changeshelf={props.changeshelf}\n                      />\n                    </li>\n                  ) : null\n                )}\n              </ol>\n            </div>\n          </div>\n          <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Read</h2>\n            <div className=\"bookshelf-books\">\n              <ol className=\"books-grid\">\n                {props.bookslist.map((book) =>\n                  book.shelf === \"read\" ? (\n                    <li key={book.id}>\n                      <Book\n                        book={book}\n                        shelf={book.shelf}\n                        changeshelf={props.changeshelf}\n                      />\n                    </li>\n                  ) : null\n                )}\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"open-search\">\n        <Link to=\"/search\">Add a book</Link>\n      </div>\n    </div>\n  );\n}\n\nexport default booklist;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport \"./App.css\";\n\nimport Searchpage from \"./searchpage\";\nimport Booklist from \"./booklist\";\n\nclass BooksApp extends React.Component {\n  state = {\n    query: \"\",\n    booksList: [],\n    searchBooksList: [],\n  };\n\n  reloadBooks = () => {\n    BooksAPI.getAll().then((books) => {\n      this.setState(() => ({\n        booksList: books,\n      }));\n    });\n  };\n\n  componentDidMount() {\n    this.reloadBooks();\n  }\n\n  changeshelf = (book, event) => {\n    const shelf = event.target.value;\n\n    BooksAPI.update(book, shelf).then(() => {\n      this.reloadBooks();\n    });\n  };\n\n  emptyBookList = () => {\n    this.setState(() => ({\n      searchBooksList: [],\n    }));\n  };\n\n  handleClose = () => {\n    this.setState({\n      query: \"\",\n      searchBooksList: [],\n    });\n  };\n\n  searchInputHandler = (event) => {\n    this.setState(\n      {\n        query: event.target.value,\n        searchBooksList: [],\n      },\n      () => {\n        //    const booksListID = new Set(this.state.booksList.map(({ id }) => id));\n        this.state.query.length > 0\n          ? BooksAPI.search(this.state.query).then((books) => {\n              console.log(books.length);\n              books.length > 1\n                ? this.setState(\n                    () => ({\n                      //======== Remove from the search list if book is already in shelf\n                      // searchBooksList: [\n                      //   ...books.filter(({ id }) => !booksListID.has(id)),\n                      // ],\n                      //========\n                      //======== Update search list with the shelf if alread added.\n\n                      searchBooksList: books.map((t1) => ({\n                        ...t1,\n                        ...this.state.booksList.find((t2) => t2.id === t1.id),\n                      })),\n                      //========\n                    }),\n                    () => {\n                      this.state.query.length === 0 && this.emptyBookList();\n                    }\n                  )\n                : this.emptyBookList();\n            })\n          : this.emptyBookList();\n      }\n    );\n  };\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"app\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Booklist\n                bookslist={this.state.booksList}\n                changeshelf={this.changeshelf}\n              />\n            </Route>\n            <Route path=\"/search\">\n              <Searchpage\n                query={this.state.query}\n                searchInputHandler={this.searchInputHandler}\n                changeshelf={this.changeshelf}\n                handleClose={this.handleClose}\n                searchBooksList={this.state.searchBooksList}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default BooksApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}